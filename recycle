#!/bin/bash

##### BEGIN HELP MESSAGE #########################
#
# A script to recycle files to the recycle bin.
#
# Usage:
#     recycle {path}...
#     recycle [opt]... {path}...
#
# Options:
#     -h: display this help message
#     -i: interactive mode: prompt user before recycling a file
#     -v: verbose mode: display a message after recycling a file
#     -r: recycle files recursively for a given path, directories are removed
#         after all files within are removed
#
# A recycled file will be stored in the 'recyclebin' in the user's home
# directory. And restore information will be stored in the file '.restore.info'
# in the user's home directory.
#
# The script uses ':' as the field separator in the restore file, so the script
# can't recycle files whose absolute path contains ':'. The script also refuse
# to recycle a file if there is already a recycled file with the same base
# filename and inode number (e.g. hardlink with the same filename).
#
##### END HELP MESSAGE ###########################

# the path of the restore file storing records of recycled files
restoreFile="$HOME/.restore.info"

# the path to the recycle bin
recycleBin="$HOME/recyclebin"

# the field separator in the restore file
separator=":"

# flag for interactive mode
interactive=false

# flag for verbose mode
verbose=false

# flag for recursive mode
recursive=false

# flag for encountered non-existing file
encounteredNonExistingFile=false

# flag for encountered directory in non-recursive mode
encounteredDir=false

# flag for attempted to recycle itself
attemptedToRecycleSelf=false

# flag for encountered file with a duplicated record
encounteredDuplicate=false

# flag for encountered file in recycle bin
encournteredRecycledFile=false

# escape all meta characters of extended regex in a string
# arg1 - string to escape
# output - escaped string
escapeForRegex() {
	echo -n "$1" | sed -E 's/([][()^$+|.*\{}])/\\\1/g'
}

# create an empty restore file if not exist
createRestoreFileIfNotExist() {
	if [ ! -e "$restoreFile" ]; then
		touch "$restoreFile"
	fi
}

# print the help message of the script
# output - the help message of the script
printHelp() {
	local beginLineNum
	local endLineNum
	beginLineNum="$(grep -n '^##### BEGIN HELP MESSAGE' "$0" | cut -d: -f1)"
	endLineNum="$(grep -n '^##### END HELP MESSAGE' "$0" | cut -d: -f1)"
	head -n "$((endLineNum - 2))" "$0" | tail -n "+$((beginLineNum + 2))" | cut -c3-
}

# parse options for the script
# -i - interactive mode: prompt user before recycling a file
# -v - verbose mode: display a message after recycling a file
# -r - recycle files recursively for a given path
# -h - help: display usage of the script
# output - error message if invalid option is provided
# exit - 32 if invalid option is provided
parseOpts() {
	while getopts ":ivrh" opt; do
		case "$opt" in
		i)
			interactive=true
			;;
		v)
			verbose=true
			;;
		r)
			recursive=true
			;;
		h)
			printHelp
			exit 0
			;;
		\?)
			echo "$0: invalid option: -- $OPTARG"
			echo "Try '$0 -h' for more usage."
			exit 32
			;;
		esac
	done
}

# validate if the number of arguments is valid (at least 1)
# output - error message if number of arguments is invalid
# exit - 33 if number of arguments is invalid
validateArgs() {
	if [ "$#" -le 0 ]; then
		echo "$0: no filename is provided"
		exit 33
	fi
}

# validate if a file can be recycled
# arg1 - the path of the file
# output - error message if file cannot be recycled
# return - 0 if the file can be recycled
#          1 if file does not exist
#          2 if in non-recursive mode and file is a directory
#          4 if file is the script itself
#          8 if the absolute path contains the field separator of restore file
#          16 if the file is already in the recycle bin
validateFile() {
	if [ ! -e "$1" ]; then
		echo "$0: file '$1' does not exist"
		encounteredNonExistingFile=true
		return 1
	fi

	if realpath "$1" | grep -q "$(escapeForRegex "$separator")"; then
		echo "$0: can't recycle file '$1' because its absolute path contains separator '$separator'"
		return 8
	fi

	if [ -d "$1" ] && ! $recursive; then
		echo "$0: '$1' is a directory, but expect a file"
		encounteredDir=true
		return 2
	fi

	if [ "$(realpath "$1")" == "$(readlink -f "$0")" ]; then
		echo "$0: cannot recycle itself"
		attemptedToRecycleSelf=true
		return 4
	fi

	if realpath "$1" | grep -qEe "^$(escapeForRegex "$(realpath "$recycleBin")")"; then
		echo "$0: cannot recycle file '$1' because it is in the recycle bin"
		encournteredRecycledFile=true
		return 16
	fi
}

# get the would-be recycled file name of a given file
# arg1 - the path to the original file
# output - the recycled file name in the format of `{originalFileName}_{inodeNumber}`
getRecycleFileName() {
	local inodeNumber
	local basefilename
	inodeNumber="$(stat -c'%i' "$1")"
	basefilename="$(basename "$1")"
	echo "${basefilename}_${inodeNumber}"
}

# check if a record (for a recycled filename and absolute path)
# already exists in the restore file
#
# arg1 - recycled file name in the format of `{originalFileName}_{inodeNumber}`
# arg2 - original absolute path
#
# output - error message if duplicate record found
# return - 0 if duplicate record found; 1 if no duplicate record
hasDuplicateRecord() {
	record="$1$separator$2"

	if grep -Eqe "^$(escapeForRegex "$record")$" "$restoreFile"; then
		encounteredDuplicate=true
		echo "$0: record '$record' already exists in '$restoreFile', you can't recycle same filename with same inode number (e.g. hardlink with same filename)"
		return 0
	fi

	return 1
}

# Append a record to the restore file
# arg1 - recycled file name in the format of `{originalFileName}_{inodeNumber}`
# arg2 - original absolute path
writeRecord() {
	record="$1$separator$2"
	echo "$record" >>"$restoreFile"
}

# prompt user to confirm recycling a file if in interactive mode
# arg1 - the path of the file
# exit - 0 if not in interactive mode or if user confirms recycling
#        1 if in interactive ode and user rejects recycling
confirmRecycleIfInteractive() {
	if ! "$interactive"; then
		return 0
	fi
	read -rp "Do you want to recycle '$1'? (y/n): " answer
	if echo -n "$answer" | grep -qive '^y'; then
		return 1
	fi
}

# display a message about a file being recycled if in verbose mode
# arg1 - the path of the file being recycled
# output - message about the file being recycled if in verbose mode
displayMessageIfVerbose() {
	if "$verbose"; then
		echo "Recycled '$1'"
	fi
}

# remove (rm) a given directory if it is empty
# Note that this function doesn't check if the script is in recursive mode
# output - 1) message about removed directory if in verbose mode
#          2) error message if the given path is a directory but not empty
# return - 0 if successfully removed an empty directory
#          1 if given path is not a directory
#          2 if the directory is not empty
rmDirIfEmpty() {
	if [ -d "$1" ]; then
		if [ -z "$(ls -A "$1")" ]; then
			rmdir "$1"
			$verbose && echo "Removed empty directory '$1'"
			return 0
		else
			echo "$0: trying to remove directory '$1', but it is not empty, so skipping"
			return 2
		fi
	fi
	return 1
}

# recycle a file
# arg1 - the path of the file
# output - 1) verbose messages if in verbose mode
#          2) error message if the file cannot be recycled,
#             or if trying to remove a directory that is not empty,
#             or if there is a duplicate record for the file
# return - 1 if the file cannot be recycled
#          2 if there is a duplicate record for the file
# exit - non-zero if serious error in moving file to recycle bin
recycleFile() {
	validateFile "$1" || return 1
	confirmRecycleIfInteractive "$1" || return 0
	rmDirIfEmpty "$1" && return 0 # in recursive mode, rm empty dir and return

	absPath="$(realpath "$1")"
	recycleFileName="$(getRecycleFileName "$1")"

	hasDuplicateRecord "$recycleFileName" "$absPath" && return 2

	ln "$1" "$recycleBin/$recycleFileName" && rm "$1"
	displayMessageIfVerbose "$1"
	writeRecord "$recycleFileName" "$absPath"
}

# calculate the exit code based on the flags
# output - the exit code whose bits represent the following:
#          1st bit (1):  if encountered non existing file
#          2nd bit (2):  if encountered directory in non-recursive mode
#          3rd bit (4):  if attempted to recycle itself
#          4th bit (8):  if encountered file with a duplicated record
#          5th bit (16): if encountered file in recycle bin
calculateExitCode() {
	local exitCode
	exitCode=0
	if $encounteredNonExistingFile; then
		(("exitCode+=1"))
	fi
	if $encounteredDir; then
		(("exitCode+=2"))
	fi
	if $attemptedToRecycleSelf; then
		(("exitCode+=4"))
	fi
	if $encounteredDuplicate; then
		(("exitCode+=8"))
	fi
	if $encournteredRecycledFile; then
		(("exitCode+=16"))
	fi
	echo $exitCode
}

########
# main #
########

parseOpts "$@"
shift $((OPTIND - 1))
validateArgs "$@"
createRestoreFileIfNotExist
mkdir -p "$recycleBin"

for arg in "$@"; do
	if $recursive; then
		while IFS= read -r -d $'\0' file; do
			recycleFile "$file"
		done < <(find "$arg" -depth -print0)
	else
		recycleFile "$arg"
	fi
done

exit "$(calculateExitCode)"
