#!/bin/bash

##########
# Set up #
##########

cd "$(dirname "$0")" || exit 1
. ./testUtils
. ./exportEnv
clearAll

printf "\033[1;35mStarting Test Suite:\033[0m %s\n" "$0"

##############
# Test cases #
##############

testName="No argument"
cmd="bash '$projectRoot/restore'"
expectedOutput="$projectRoot/restore: no filename is provided"
testExe "$testName" "$cmd" "$expectedOutput"

testName="Restore a non-existing file"
cmd="bash '$projectRoot/restore' non-existing-file_123"
expectedOutput="$projectRoot/restore: file 'non-existing-file_123' does not exist in '$recycleBin'"
testExe "$testName" "$cmd" "$expectedOutput"

testName="Restore a single file"
fileName="testFile"
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
absPath="$(realpath "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "$recycleFileName:$absPath" >"$restoreFile"
echo "random-file_72189214:/tmp/non-existing-dir/random-file" >>"$restoreFile" # add a random record
mv "$fileName" "$recycleBin/$recycleFileName"
cmd="bash '$projectRoot/restore' $recycleFileName"
testExe "$testName" "$cmd" ''
verifyFileExist "$fileName"
verifyFileNotExist "$recycleBin/$recycleFileName"
checkRestoreInfoNotExist "$recycleFileName" "$absPath"
checkRestoreInfo "random-file_72189214" "/tmp/non-existing-dir/random-file" # check the random record is still there
rm "$fileName"
clearAll

testName="Restore a single file overwriting an existing file"
fileName="testFile"
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
absPath="$(realpath "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "$recycleFileName:$absPath" >"$restoreFile"
mv "$fileName" "$recycleBin/$recycleFileName"
touch "$fileName" # create a existing file to be overwritten by the restore
echo "y" >"$tmpInput"
cmd="bash '$projectRoot/restore' \"$recycleFileName\" <\"$tmpInput\""
testExe "$testName" "$cmd" ''
verifyFileExist "$fileName"
verifyFileNotExist "$recycleBin/$recycleFileName"
checkRestoreInfoNotExist "$recycleFileName" "$absPath"
rm "$fileName"
clearAll

testName="Not overwriting an existing file when restoring it"
fileName="testFile"
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
absPath="$(realpath "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "$recycleFileName:$absPath" >"$restoreFile"
mv "$fileName" "$recycleBin/$recycleFileName"
touch "$fileName" # create a existing file to prompt for whether to overwrite
echo "n" >"$tmpInput"
cmd="bash '$projectRoot/restore' \"$recycleFileName\" <\"$tmpInput\""
testExe "$testName" "$cmd" ''
verifyFileExist "$fileName"
verifyFileExist "$recycleBin/$recycleFileName"
checkRestoreInfo "$recycleFileName" "$absPath"
rm "$fileName"
clearAll

testName="Restoring to a non-existing directory"
dirName="testDir"
fileName="testFile"
mkdir -p "$dirName"
touch "$dirName/$fileName"
inodeNumber="$(getInodeNumber "$dirName/$fileName")"
absPath="$(realpath "$dirName/$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "$recycleFileName:$absPath" >"$restoreFile"
mv "$dirName/$fileName" "$recycleBin/$recycleFileName"
rmdir "$dirName"
cmd="bash '$projectRoot/restore' $recycleFileName"
testExe "$testName" "$cmd" ''
verifyFileExist "$dirName/$fileName"
verifyFileNotExist "$recycleBin/$recycleFileName"
checkRestoreInfoNotExist "$recycleFileName" "$absPath"
rm -r "$dirName"
clearAll

testName='exit non-zero if passing invalid option'
fileName="testFile"
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
absPath="$(realpath "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "$recycleFileName:$absPath" >"$restoreFile"
mv "$fileName" "$recycleBin/$recycleFileName"
cmd="bash '$projectRoot/restore' -x $recycleFileName"
expectedOutput="$projectRoot/restore: invalid option: -- x"$'\n'"Try '$projectRoot/restore -h' for more usage."
testExe "$testName" "$cmd" "$expectedOutput"
verifyFileNotExist "$fileName"
verifyFileExist "$recycleBin/$recycleFileName"
checkRestoreInfo "$recycleFileName" "$absPath"
clearAll

testName='can restore weird file name using recursive mode'
fileName='f+ gogogo!'
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
absPath="$(realpath "$fileName")"
mv "$fileName" "$recycleBin/$recycleFileName"
echo "$recycleFileName:$absPath" >"$restoreFile"
cmd="bash '$projectRoot/restore' -r \"$fileName\""
testExe "$testName" "$cmd" ""
verifyFileExist "$fileName"
verifyFileNotExist "$recycleBin/$recycleFileName"
checkRestoreInfoNotExist "$recycleFileName" "$absPath"
rm "$fileName"
clearAll

testName='help mode should print help message'
cmd="bash '$projectRoot/restore' -h"
beginLineNum="$(grep -n '^##### BEGIN HELP MESSAGE' "$projectRoot/restore" | cut -d: -f1)"
endLineNum="$(grep -n '^##### END HELP MESSAGE' "$projectRoot/restore" | cut -d: -f1)"
expectedOutput="$(head -n "$((endLineNum - 2))" "$projectRoot/restore" | tail -n "+$((beginLineNum + 2))" | cut -c3-)"
testExe "$testName" "$cmd" "$expectedOutput"
