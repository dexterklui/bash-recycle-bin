#!/bin/bash

##########
# Set up #
##########

. ./testUtils
. ./exportEnv
clearAll

##############
# Test cases #
##############

testName="No argument"
cmd="bash ./restore"
expectedOutput="./restore: no filename is provided"
testExe "$testName" "$cmd" "$expectedOutput"

testName="Restore a non-existing file"
cmd="bash ./restore non-existing-file_123"
expectedOutput="./restore: file 'non-existing-file_123' does not exist in '$recycleBin'"
testExe "$testName" "$cmd" "$expectedOutput"

testName="Restore a single file"
fileName="testFile"
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
absPath="$(realpath "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "$recycleFileName:$absPath" >"$restoreFile"
echo "random-file_72189214:/tmp/non-existing-dir/random-file" >>"$restoreFile" # add a random record
mv "$fileName" "$recycleBin/$recycleFileName"
cmd="bash ./restore $recycleFileName"
testExe "$testName" "$cmd" ''
verifyFileExist "$fileName"
verifyFileNotExist "$recycleBin/$recycleFileName"
checkRestoreInfoNotExist "$recycleFileName" "$absPath"
checkRestoreInfo "random-file_72189214" "/tmp/non-existing-dir/random-file" # check the random record is still there
rm "$fileName"
clearAll

testName="Restore a single file overwriting an existing file"
fileName="testFile"
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
absPath="$(realpath "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "$recycleFileName:$absPath" >"$restoreFile"
mv "$fileName" "$recycleBin/$recycleFileName"
touch "$fileName" # create a existing file to be overwritten by the restore
echo "y" >"$tmpInput"
cmd="bash ./restore \"$recycleFileName\" <\"$tmpInput\""
testExe "$testName" "$cmd" ''
verifyFileExist "$fileName"
verifyFileNotExist "$recycleBin/$recycleFileName"
checkRestoreInfoNotExist "$recycleFileName" "$absPath"
rm "$fileName"
clearAll

testName="Not overwriting an existing file when restoring it"
fileName="testFile"
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
absPath="$(realpath "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "$recycleFileName:$absPath" >"$restoreFile"
mv "$fileName" "$recycleBin/$recycleFileName"
touch "$fileName" # create a existing file to prompt for whether to overwrite
echo "n" >"$tmpInput"
cmd="bash ./restore \"$recycleFileName\" <\"$tmpInput\""
testExe "$testName" "$cmd" ''
verifyFileExist "$fileName"
verifyFileExist "$recycleBin/$recycleFileName"
checkRestoreInfo "$recycleFileName" "$absPath"
rm "$fileName"
clearAll

testName="Restoring to a non-existing directory"
dirName="testDir"
fileName="testFile"
mkdir -p "$dirName"
touch "$dirName/$fileName"
inodeNumber="$(getInodeNumber "$dirName/$fileName")"
absPath="$(realpath "$dirName/$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "$recycleFileName:$absPath" >"$restoreFile"
mv "$dirName/$fileName" "$recycleBin/$recycleFileName"
rmdir "$dirName"
cmd="bash ./restore $recycleFileName"
testExe "$testName" "$cmd" ''
verifyFileExist "$dirName/$fileName"
verifyFileNotExist "$recycleBin/$recycleFileName"
checkRestoreInfoNotExist "$recycleFileName" "$absPath"
rm -r "$dirName"
clearAll

testName='exit non-zero if passing invalid option'
fileName="testFile"
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
absPath="$(realpath "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "$recycleFileName:$absPath" >"$restoreFile"
mv "$fileName" "$recycleBin/$recycleFileName"
cmd="bash ./restore -x $recycleFileName"
testExe "$testName" "$cmd" './restore: invalid option: -- x'
verifyFileNotExist "$fileName"
verifyFileExist "$recycleBin/$recycleFileName"
checkRestoreInfo "$recycleFileName" "$absPath"
clearAll
