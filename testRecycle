#!/bin/bash

##########
# Set up #
##########

. ./testUtils
. ./exportEnv
clearAll

##############
# Test cases #
##############

testExe 'no argument' 'bash ./recycle' \
	'./recycle: no filename is provided'
testExe 'provided single non-existing file' 'bash ./recycle non-existing-file' \
	"./recycle: file 'non-existing-file' does not exist"

mkdir -p "$tmpDir"
testExe 'provided single directory' "bash ./recycle \"$tmpDir\"" \
	"./recycle: '$tmpDir' is a directory, but expect a file"
rmdir "$tmpDir"

testExe 'recycle the recycle script itself' 'bash ./recycle ./recycle' \
	"./recycle: cannot recycle itself"

touch "$tmpFile"
inodeNumber="$(getInodeNumber "$tmpFile")"
testExe 'recycle single file does put into recyle bin' "bash ./recycle \"$tmpFile\"" ''
verifyFileExist "$recycleBin/${tmpFile}_$inodeNumber"
clearAll

mkdir -p "$tmpDir"
targetFile="$tmpDir/$tmpFile"
touch "$targetFile"
inodeNumber="$(getInodeNumber "$targetFile")"
testExe 'recycle single file in a directory does put into recyle bin' "bash ./recycle \"$targetFile\"" ''
verifyFileExist "$recycleBin/${tmpFile}_$inodeNumber"
rmdir "$tmpDir"
clearAll

touch "$tmpFile"
absPath="$(realpath "$tmpFile")"
inodeNumber="$(getInodeNumber "$tmpFile")"
testExe 'recycling file updates .restore.info' "bash ./recycle \"$tmpFile\"" ''
checkRestoreInfo "${tmpFile}_$inodeNumber" "$absPath"
clearAll

testName='removing multiple files with same filename'
file1="$tmpFile"
file2="$tmpDir/$tmpFile"
mkdir -p "$tmpDir"
touch "$file1" "$file2"
path1="$(realpath "$file1")"
path2="$(realpath "$file2")"
inode1="$(getInodeNumber "$file1")"
inode2="$(getInodeNumber "$file2")"
testExe "$testName" "bash ./recycle \"$file1\"; bash ./recycle \"$file2\"" ''
checkRestoreInfo "${tmpFile}_$inode1" "$path1"
checkRestoreInfo "${tmpFile}_$inode2" "$path2"
verifyFileExist "$recycleBin/${tmpFile}_$inode1"
verifyFileExist "$recycleBin/${tmpFile}_$inode2"
rmdir "$tmpDir"
clearAll

testName='exit non-zero if passing invalid option'
fileName="testFile"
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
absPath="$(realpath "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
testExe "$testName" "bash ./recycle -x \"$fileName\"" './recycle: invalid option: -- x'
verifyFileExist "$fileName"
verifyFileNotExist "$recycleBin/$recycleFileName"
checkRestoreInfoNotExist "$recycleFileName" "$absPath"
clearAll

testName='confirm recycling when in interactive mode'
fileName1="testFile1"
fileName2="testFile2"
touch "$fileName1" "$fileName2"
inodeNumber1="$(getInodeNumber "$fileName1")"
inodeNumber2="$(getInodeNumber "$fileName2")"
absPath1="$(realpath "$fileName1")"
absPath2="$(realpath "$fileName2")"
recycleFileName1="${fileName1}_${inodeNumber1}"
recycleFileName2="${fileName2}_${inodeNumber2}"
echo "y" >"$tmpInput"
echo "n" >>"$tmpInput"
cmd="bash ./recycle -i \"$fileName1\" \"$fileName2\" <\"$tmpInput\""
testExe "$testName" "$cmd"
verifyFileExist "$recycleBin/$recycleFileName1"
verifyFileExist "$fileName2"
verifyFileNotExist "$fileName1"
verifyFileNotExist "$recycleBin/$recycleFileName2"
checkRestoreInfo "$recycleFileName1" "$absPath1"
checkRestoreInfoNotExist "$recycleFileName2" "$absPath2"
rm "$fileName2"
clearAll

testName='display message in verbose mode'
fileName="testFile"
touch "$fileName"
cmd="bash ./recycle -v \"$fileName\""
testExe "$testName" "$cmd" "Recycled '$fileName'"
clearAll

testName='recycle in both verbose and interactive mode'
fileName="testFile"
touch "$fileName"
inodeNumber="$(getInodeNumber "$fileName")"
absPath="$(realpath "$fileName")"
recycleFileName="${fileName}_${inodeNumber}"
echo "y" >"$tmpInput"
cmd="bash ./recycle -vi \"$fileName\" <\"$tmpInput\""
testExe "$testName" "$cmd" "Recycled '$fileName'"
verifyFileExist "$recycleBin/$recycleFileName"
verifyFileNotExist "$fileName"
checkRestoreInfo "$recycleFileName" "$absPath"
clearAll

testName='Recursive recycling'
mkdir -p tmpDir/nestDir1 tmpDir/nestDir2
touch tmpDir/f{1..3} tmpDir/nestDir1/f{1..3} tmpDir/nestDir2/f{1..3}
inodeNumber="$(getInodeNumber tmpDir/nestDir2/f1)"
recycleFileName="f1_$inodeNumber"
realPath="$(realpath tmpDir/nestDir2/f1)"
dirInodeNumber="$(getInodeNumber tmpDir)"
dirRecycleFileName="tmpDir_$dirInodeNumber"
dirRealPath="$(realpath tmpDir)"
cmd="bash ./recycle -r tmpDir"
testExe "$testName" "$cmd" ''
verifyFileNotExist tmpDir
verifyFileExist "$recycleBin/$recycleFileName"
checkRestoreInfo "$recycleFileName" "$realPath"
verifyFileNotExist "$recycleBin/$dirRecycleFileName"
checkRestoreInfoNotExist "$dirRecycleFileName" "$dirRealPath"
cleanAll
