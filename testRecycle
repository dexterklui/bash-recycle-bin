#!/bin/bash

# 1st arg: test description
# 2nd arg: command to execute
# 3rd arg (optional): expected result
testExe() {
	printTestMsgHeader "$1" "$2"
	result="$(eval "$2")"

	if [ "$#" -ge 3 ]; then
		if [ "$result" = "$3" ]; then
			echo -e "\033[1;32mOutput passed\033[0m"
		else
			echo -e "\033[1;31mOuput unmatched\033[0m"
			echo "Expected: $3"
			echo "Got: $result"
			exit 1
		fi
	else
		echo -e "Output: $result"
	fi
}

verifyFileExist() {
	if [ ! -e "$1" ]; then
		echo -e "\033[1;31mTest failed\033[0m"
		echo "File '${1}' does not exist"
		exit 2
	fi
}

# 1st arg: file name
# 2nd arg: absolute path
checkRestoreInfo() {
	record="$1$restoreInfoSep$2"
	if ! grep -Fqe "$record" "$restoreFile"; then
		echo -en "\033[1;31mTest failed\033[0m: "
		echo "Cannot find record '$record' in '$restoreFile'"
		exit 3
	fi
}

printTestMsgHeader() {
	printf "\033[1;34mTest %s:\033[0m %s\n" "$1" "$2"
}

##########
# Set up #
##########

. ./testUtils

##############
# Test cases #
##############

rm -r "$recycleBin"
clearAll

testExe 'no argument' 'bash ./recycle' \
	'./recycle: no filename is provided'
testExe 'provided single non-existing file' 'bash ./recycle non-existing-file' \
	"./recycle: file 'non-existing-file' does not exist"

mkdir -p "$tmpDir"
testExe 'provided single directory' "bash ./recycle \"$tmpDir\"" \
	"./recycle: '$tmpDir' is a directory, but expect a file"
rmdir "$tmpDir"

testExe 'recycle the recycle script itself' 'bash ./recycle ./recycle' \
	"./recycle: cannot recycle itself"

touch "$tmpFile"
inodeNumber="$(ls -i "$tmpFile" | cut -d' ' -f1)"
testExe 'recycle single file does put into recyle bin' "bash ./recycle \"$tmpFile\"" ''
verifyFileExist "$recycleBin/${tmpFile}_$inodeNumber"
clearAll

mkdir -p "$tmpDir"
targetFile="$tmpDir/$tmpFile"
touch "$targetFile"
inodeNumber="$(ls -i "$targetFile" | cut -d' ' -f1)"
testExe 'recycle single file in a directory does put into recyle bin' "bash ./recycle \"$targetFile\"" ''
verifyFileExist "$recycleBin/${tmpFile}_$inodeNumber"
rmdir "$tmpDir"
clearAll

touch "$tmpFile"
absPath="$(realpath "$tmpFile")"
inodeNumber="$(ls -i "$tmpFile" | cut -d' ' -f1)"
testExe 'recycling file updates .restore.info' "bash ./recycle \"$tmpFile\"" ''
checkRestoreInfo "${tmpFile}_$inodeNumber" "$absPath"
clearAll

testName='removing multiple files with same filename'
file1="$tmpFile"
file2="$tmpDir/$tmpFile"
mkdir -p "$tmpDir"
touch "$file1" "$file2"
path1="$(realpath "$file1")"
path2="$(realpath "$file2")"
inode1="$(ls -i "$file1" | cut -d' ' -f1)"
inode2="$(ls -i "$file2" | cut -d' ' -f1)"
testExe "$testName" "bash ./recycle \"$file1\"; bash ./recycle \"$file2\"" ''
checkRestoreInfo "${tmpFile}_$inode1" "$path1"
checkRestoreInfo "${tmpFile}_$inode2" "$path2"
verifyFileExist "$recycleBin/${tmpFile}_$inode1"
verifyFileExist "$recycleBin/${tmpFile}_$inode2"
rmdir "$tmpDir"
clearAll
