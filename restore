#!/bin/bash

##### BEGIN HELP MESSAGE #########################
#
# A script to restore recycled files from the recycle bin.
#
# Usage:
#     restore {recycled-file-name}
#     restore -r {destination-path}
#
# Options:
#     -h: display this help message
#     -r: restore recursively all recycled files that were originally at or
#         under a destination path
#
# Recycled files are stored in the 'recyclebin' in the user's home directory.
# And restore information will be stored in the file '.restore.info' in the
# user's home directory.
#
# If a file to be restored is already present in the destination path, the user
# will be prompted for confirmation to overwrite the existing file.
#
# The script will create non-existing directories if needed to restore a file to
# its original position.
#
##### END HELP MESSAGE ###########################

# the path the the file storing records of recycled files
restoreFile="$HOME/.restore.info"

# the path to the recycle bin
recycleBin="$HOME/recyclebin"

# flag for recursive mode
recursive=false

printHelp() {
	local beginLineNum
	local endLineNum
	beginLineNum="$(grep -n '^##### BEGIN HELP MESSAGE' "$0" | cut -d: -f1)"
	endLineNum="$(grep -n '^##### END HELP MESSAGE' "$0" | cut -d: -f1)"
	head -n "$((endLineNum - 2))" "$0" | tail -n "+$((beginLineNum + 2))" | cut -c3-
}

# parse options for the script
#   -r - restore recursively all recycled files at or under a given destination
#        path
#   -h - help: display usage of the script
# output - error message if invalid option is provided
# exit - 8 if invalid option is provided
parseOpts() {
	while getopts ":rh" opt; do
		case "$opt" in
		r)
			recursive=true
			;;
		h)
			printHelp
			exit 0
			;;
		\?)
			echo "$0: invalid option: -- $OPTARG"
			echo "Try '$0 -h' for more usage."
			exit 8
			;;
		esac
	done
}

# validate if the number of arguments is valid (at least 1)
# output - error message if number of arguments is invalid
# exit - 1 if number of arguments is invalid
validateArgs() {
	if [ "$#" -le 0 ]; then
		echo "$0: no filename is provided"
		exit 1
	fi
}

# validate if a file exists in the recycle bin
# arg1 - the recycled file name in the format of `{originalFileName}_{inodeNumber}`
# output - error message if file does not exist in the recycle bin
# exit - 2 if file does not exist in the recycle bin; 0 otherwise
validateFile() {
	if [ ! -e "$recycleBin/$1" ]; then
		echo "$0: file '$1' does not exist in '$recycleBin'"
		exit 2
	fi
}

# escape all meta characters of extended regex in a string
# arg1 - string to escape
# output - escaped string
escapeForRegex() {
	echo -n "$1" | sed -E 's/([][()^$+|.*\{}])/\\\1/g'
}

# validate if there is a record for a file
# arg1 - recycled file name in the format of `{originalFileName}_{inodeNumber}`
# output - error message if no record found
# exit - 5 if no record found
validateHasRecord() {
	record="$(getRecord "$1")"
	numberOfRecords="$(echo "$record" | wc -l)"

	if [ -z "$record" ]; then
		echo "$0: Can't find restore info for file '$1', may indicate a corrupted restore info file"
		exit 5
	fi

	if [ "$numberOfRecords" -ge 2 ]; then
		echo "$0: Multiple restore info found for file '$1', may indicate a corrupted restore info file"
		exit 5
	fi
}

# get record for a file with the recycled file name
# arg1 - recycled file name in the format of `{originalFileName}_{inodeNumber}`
# output - record for the file
getRecord() {
	grep -Ee "^$(escapeForRegex "$1"):" "$restoreFile" 2>/dev/null
}

# find all records from .restore.info that is within the given absolute path,
# and then fill the result to the global variable 'records'
# arg1 - absolute path
# output - error message if no records found
# exit - 3 if no records found, 0 otherwise
updateRecordsFromAbsPath() {
	records="$(grep -Ee ":$(escapeForRegex "$1")" "$restoreFile")"
	if [ -z "$records" ]; then
		echo "$0: Can't find any recycle record associated with path '$1'"
		exit 3
	fi
}

# remove record for a file with the given recycled file name
# arg1 - recycled file name in the format of `{originalFileName}_{inodeNumber}`
removeRecord() {
	sed -i -E -e "/^$(escapeForRegex "$1"):/d" "$restoreFile"
}

# Recreate a minimalistic absolute path of a given absolute/relative path, by resolving '.' and '..'
#
# arg1 - absolute/relative path to be resolved
#
# output - minimalistic absolute path.
#          The resultant path can be an illegal path depending on the current working
#          directory and the given path. E.g. `/../` is the output if given `../`
#          while being at the root directory
recreateAbsPath() {
	local absPath

	if [ "${1:0:1}" == '/' ]; then
		absPath="$1"
	else
		absPath="$PWD/$1"
	fi

	# squeeze consecutive slashes
	absPath="$(echo -n "$PWD/$1" | sed -E 's:/{2,}:/:g')"

	# replace '/./' with '/'
	while echo -n "$absPath" | grep -qe '/\./'; do
		absPath="$(echo -n "$absPath" | sed 's:/\./:/:')"
	done

	# remove trailing '/.' or trailing '/'
	absPath="$(echo -n "$absPath" | sed -E 's:/\.$|/$::')"

	# resolve '..'
	while echo -n "$absPath" | grep -Eqe '/[^/]+/\.\.'; do
		absPath="$(echo -n "$absPath" | sed -E 's:/[^/]+/\.\.::')"
	done

	echo "$absPath"
}

# Prompt the user for confiramtion to overwrite a given path, and return 0 if user confirms
# arg1 - path to be prompted for overwrite
# exit - 0 if user confirm overwriting with a response starting with 'y'/'Y'; 1 otherwise
userConfirmOverwrite() {
	read -rp "Do you want to overwrite the existing file '$1'? (y/n): " answer
	if echo -n "$answer" | grep -qive '^y'; then
		exit 1
	fi
}

# restore a file from the recycle bin given its recycled-file name.
# Note: In recursive mode, provided recycled-file name should be extracted
#       from the records already, so this function will skip validation
#
# arg1 - recycled-file name in the format of `{originalFileName}_{inodeNumber}`
#
# output - error message if the file does not exist in the recycle bin or no record found,
#          or serious problem like can't access the recycle bin
#
# exit - 0 if the file is successfully restored; non-zero otherwise
restoreFile() {
	if ! $recursive; then
		validateFile "$1"
		validateHasRecord "$1"
	fi

	absPath="$(getRecord "$1" | cut -d':' -f2)"
	if [ ! -e "$absPath" ] || userConfirmOverwrite "$absPath"; then
		mkdir -p "$(dirname "$absPath")"
		mv "$recycleBin/$1" "$absPath"
		removeRecord "$1"
	fi
}

########
# main #
########

parseOpts "$@"
shift $((OPTIND - 1))
validateArgs "$@"

if $recursive; then
	IFS=$'\n'
	absPath="$(recreateAbsPath "$1")"
	updateRecordsFromAbsPath "$absPath"
	for record in $records; do
		restoreFile "$(echo "$record" | cut -d':' -f1)"
	done
	unset IFS
else
	restoreFile "$1"
fi
